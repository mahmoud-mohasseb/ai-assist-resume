import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Separator } from './ui/separator';
import { ScrollArea } from './ui/scroll-area';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { ArrowLeft, Download, FileText, BarChart3, User, Calendar, CheckCircle, Target, Figma, Palette, Monitor, Smartphone, Tablet, Layers, Box, Zap, Code, Archive, Share2 } from 'lucide-react';

interface ExportModeProps {
  data: any;
  onBack: () => void;
}

type ExportFormat = 'pdf' | 'docx' | 'markdown' | 'figma' | 'css' | 'svg' | 'zip';

export function ExportMode({ data, onBack }: ExportModeProps) {
  const [selectedFormat, setSelectedFormat] = useState<ExportFormat>('pdf');
  const [isExporting, setIsExporting] = useState(false);

  const hasRecruiterData = data.recruiterinterviewData;
  const hasResumeData = data.candidateresumeData;
  const hasAssessmentData = data.candidateassessmentData;

  const handleExport = async (format: ExportFormat, reportType: string) => {
    setIsExporting(true);
    
    // Simulate export process
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    let content = '';
    let filename = '';
    let mimeType = 'text/plain';
    
    if (format === 'figma') {
      content = generateFigmaExport(reportType);
      filename = `${reportType}.fig`;
      mimeType = 'application/json';
    } else if (format === 'css') {
      content = generateCSSExport();
      filename = 'design-tokens.css';
      mimeType = 'text/css';
    } else if (format === 'svg') {
      content = generateSVGExport();
      filename = 'assets.svg';
      mimeType = 'image/svg+xml';
    } else if (format === 'zip') {
      content = 'Design package would be generated here';
      filename = 'design-package.zip';
      mimeType = 'application/zip';
    } else {
      content = generateExportContent(reportType);
      filename = `${reportType}_report.${format === 'docx' ? 'docx' : format === 'pdf' ? 'pdf' : 'md'}`;
    }
    
    // In a real app, this would generate and download the actual file
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    setIsExporting(false);
  };

  const generateExportContent = (reportType: string): string => {
    const timestamp = new Date().toISOString().split('T')[0];
    
    if (reportType === 'recruiter' && hasRecruiterData) {
      return generateRecruiterReport();
    } else if (reportType === 'resume' && hasResumeData) {
      return generateResumeReport();
    } else if (reportType === 'assessment' && hasAssessmentData) {
      return generateAssessmentReport();
    }
    
    return `AI Career Assistant Report\nGenerated on: ${timestamp}\n\nNo data available for this report type.`;
  };

  const generateRecruiterReport = (): string => {
    const recruiterData = data.recruiterinterviewData;
    
    return `# CANDIDATE INTERVIEW EVALUATION REPORT

Generated by AI Career Assistant
Date: ${new Date().toLocaleDateString()}

## CANDIDATE INFORMATION
Name: ${recruiterData.candidateName}
Position: ${recruiterData.position}
Interview Difficulty: ${recruiterData.difficulty}

## OVERALL ASSESSMENT
Score: ${recruiterData.evaluation.score_percent}%
Recommendation: ${recruiterData.evaluation.recommendation}
Confidence Level: ${recruiterData.evaluation.overall_confidence}

## SKILL EVALUATION
${Object.entries(recruiterData.evaluation.skills).map(([skill, score]) => 
  `${skill.replace('_', ' ').toUpperCase()}: ${score}/10`
).join('\n')}

## SUMMARY
${recruiterData.evaluation.summary}

## STRENGTHS
${recruiterData.evaluation.strengths.map((s: string) => `• ${s}`).join('\n')}

## AREAS FOR IMPROVEMENT
${recruiterData.evaluation.weaknesses.map((w: string) => `• ${w}`).join('\n')}

## GROWTH POTENTIAL
${recruiterData.evaluation.growth_potential}

## INTERVIEW TRANSCRIPT
${recruiterData.messages.map((msg: any) => 
  `${msg.role}: ${msg.text}\n[${msg.timestamp}]\n`
).join('\n')}

---
Report generated by AI Career Assistant - Professional Recruitment Platform`;
  };

  const generateResumeReport = (): string => {
    const resumeData = data.candidateresumeData;
    
    return `# RESUME OPTIMIZATION REPORT

Generated by AI Career Assistant
Date: ${new Date().toLocaleDateString()}

## CANDIDATE INFORMATION
Name: ${resumeData.candidateName}
Target Position: ${resumeData.targetPosition}

## OPTIMIZATION RESULTS
Overall Score: ${resumeData.analysis.overallScore}%
Keyword Match: ${resumeData.analysis.keywordMatch}%
Skills Alignment: ${resumeData.analysis.skillsAlignment}%
Experience Relevance: ${resumeData.analysis.experienceRelevance}%
Format Optimization: ${resumeData.analysis.formatOptimization}%

## TAILORED RESUME

${resumeData.tailoredResume}

## OPTIMIZATION SUMMARY
${resumeData.analysis.suggestions.map((s: string) => `• ${s}`).join('\n')}

## STRENGTH AREAS
${resumeData.analysis.strengthAreas.map((s: string) => `• ${s}`).join('\n')}

## IMPROVEMENT RECOMMENDATIONS
${resumeData.analysis.improvementAreas.map((i: string) => `• ${i}`).join('\n')}

---
Report generated by AI Career Assistant - Resume Optimization Service`;
  };

  const generateAssessmentReport = (): string => {
    const assessmentData = data.candidateassessmentData;
    
    return `# SELF-ASSESSMENT INTERVIEW REPORT

Generated by AI Career Assistant
Date: ${new Date().toLocaleDateString()}

## CANDIDATE INFORMATION
Name: ${assessmentData.candidateName}
Target Role: ${assessmentData.targetRole}
Experience Level: ${assessmentData.yearsExperience}
Interview Difficulty: ${assessmentData.difficulty}

## OVERALL ASSESSMENT
Score: ${assessmentData.assessment.overall_score_percent}%
Recommendation: ${assessmentData.assessment.recommendation}

## SKILL BREAKDOWN
${Object.entries(assessmentData.assessment.skills).map(([skill, score]) => 
  `${skill.replace('_', ' ').toUpperCase()}: ${score}`
).join('\n')}

## SUMMARY
${assessmentData.assessment.summary}

## STRENGTHS
${assessmentData.assessment.detailedFeedback.strengths.map((s: string) => `• ${s}`).join('\n')}

## IMPROVEMENT AREAS
${assessmentData.assessment.detailedFeedback.improvements.map((i: string) => `• ${i}`).join('\n')}

## COACHING RECOMMENDATIONS
${assessmentData.assessment.detailedFeedback.coaching.map((c: string, index: number) => `${index + 1}. ${c}`).join('\n')}

## INTERVIEW TRANSCRIPT
${assessmentData.messages.map((msg: any) => 
  `${msg.role}: ${msg.text}\n[${msg.timestamp}]\n`
).join('\n')}

---
Report generated by AI Career Assistant - Self-Assessment Platform`;
  };

  const generateFigmaExport = (exportType: string): string => {
    // Mock Figma file structure
    const figmaData = {
      name: `AI Career Assistant - ${exportType}`,
      role: "owner",
      lastModified: new Date().toISOString(),
      version: "1.0.0",
      document: {
        id: "0:0",
        name: "Document",
        type: "DOCUMENT",
        children: [
          {
            id: "1:1",
            name: "Dashboard",
            type: "CANVAS",
            backgroundColor: { r: 0.95, g: 0.95, b: 0.95 },
            children: [
              {
                id: "2:1",
                name: "Header",
                type: "FRAME",
                x: 0,
                y: 0,
                width: 1200,
                height: 80,
                fills: [{ type: "SOLID", color: { r: 1, g: 1, b: 1 } }]
              },
              {
                id: "2:2",
                name: "Sidebar",
                type: "FRAME",
                x: 0,
                y: 80,
                width: 250,
                height: 800,
                fills: [{ type: "SOLID", color: { r: 0.98, g: 0.98, b: 0.98 } }]
              },
              {
                id: "2:3",
                name: "Main Content",
                type: "FRAME",
                x: 250,
                y: 80,
                width: 950,
                height: 800,
                fills: [{ type: "SOLID", color: { r: 1, g: 1, b: 1 } }]
              }
            ]
          }
        ]
      },
      styles: {
        "colors": {
          "primary": { r: 0.235, g: 0.51, b: 0.96 },
          "secondary": { r: 0.458, g: 0.361, b: 0.757 },
          "background": { r: 1, g: 1, b: 1 },
          "text": { r: 0.145, g: 0.145, b: 0.145 }
        },
        "typography": {
          "heading-1": { fontSize: 24, fontWeight: 600, lineHeight: 1.5 },
          "heading-2": { fontSize: 20, fontWeight: 600, lineHeight: 1.5 },
          "body": { fontSize: 14, fontWeight: 400, lineHeight: 1.5 }
        }
      },
      components: [
        {
          id: "3:1",
          name: "Button/Primary",
          type: "COMPONENT",
          width: 120,
          height: 40,
          fills: [{ type: "SOLID", color: { r: 0.235, g: 0.51, b: 0.96 } }]
        },
        {
          id: "3:2",
          name: "Card",
          type: "COMPONENT",
          width: 300,
          height: 200,
          fills: [{ type: "SOLID", color: { r: 1, g: 1, b: 1 } }]
        }
      ]
    };

    return JSON.stringify(figmaData, null, 2);
  };

  const generateCSSExport = (): string => {
    return `/* AI Career Assistant Design Tokens */
/* Generated on ${new Date().toLocaleDateString()} */

:root {
  /* Colors */
  --color-primary: #3b82f6;
  --color-primary-foreground: #ffffff;
  --color-secondary: #8b5cf6;
  --color-secondary-foreground: #ffffff;
  --color-background: #ffffff;
  --color-foreground: #0f172a;
  --color-muted: #f8fafc;
  --color-muted-foreground: #64748b;
  --color-border: rgba(0, 0, 0, 0.08);
  --color-success: #10b981;
  --color-warning: #f59e0b;
  --color-error: #ef4444;

  /* Typography */
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.25rem;
  --font-size-2xl: 1.5rem;
  --font-size-3xl: 1.875rem;
  --font-size-4xl: 2.25rem;

  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;

  /* Spacing */
  --spacing-1: 0.25rem;
  --spacing-2: 0.5rem;
  --spacing-3: 0.75rem;
  --spacing-4: 1rem;
  --spacing-6: 1.5rem;
  --spacing-8: 2rem;
  --spacing-12: 3rem;
  --spacing-16: 4rem;

  /* Border Radius */
  --radius-sm: 0.375rem;
  --radius-md: 0.5rem;
  --radius-lg: 0.75rem;
  --radius-xl: 1rem;

  /* Shadows */
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
  --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1);

  /* Transitions */
  --transition-fast: 150ms ease-in-out;
  --transition-normal: 250ms ease-in-out;
  --transition-slow: 350ms ease-in-out;
}

/* Dark mode variables */
[data-theme="dark"] {
  --color-background: #0f172a;
  --color-foreground: #f8fafc;
  --color-muted: #1e293b;
  --color-muted-foreground: #94a3b8;
  --color-border: #334155;
}

/* Component styles */
.button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: var(--spacing-3) var(--spacing-6);
  border-radius: var(--radius-md);
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-medium);
  transition: all var(--transition-fast);
  cursor: pointer;
  border: none;
}

.button--primary {
  background-color: var(--color-primary);
  color: var(--color-primary-foreground);
}

.button--primary:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.card {
  background-color: var(--color-background);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-lg);
  padding: var(--spacing-6);
  box-shadow: var(--shadow-sm);
}

.card:hover {
  box-shadow: var(--shadow-md);
}`;
  };

  const generateSVGExport = (): string => {
    return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="400" height="400" viewBox="0 0 400 400" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="primaryGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#3b82f6;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#8b5cf6;stop-opacity:1" />
    </linearGradient>
  </defs>
  
  <!-- AI Career Assistant Logo -->
  <rect x="50" y="50" width="300" height="300" rx="20" fill="url(#primaryGradient)" />
  
  <!-- Icon Elements -->
  <circle cx="150" cy="150" r="30" fill="white" opacity="0.9" />
  <rect x="200" y="120" width="60" height="60" rx="8" fill="white" opacity="0.9" />
  <path d="M120 250 L180 200 L240 250 L280 210" stroke="white" stroke-width="4" fill="none" opacity="0.9" />
  
  <!-- Brand Text -->
  <text x="200" y="320" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="18" font-weight="bold">
    AI Career Assistant
  </text>
  
  <!-- Component Icons -->
  <g transform="translate(50, 380)">
    <!-- Button Icon -->
    <rect x="0" y="0" width="60" height="20" rx="10" fill="#3b82f6" />
    <text x="30" y="35" text-anchor="middle" fill="#64748b" font-size="10">Button</text>
  </g>
  
  <g transform="translate(130, 380)">
    <!-- Card Icon -->
    <rect x="0" y="0" width="50" height="35" rx="4" fill="white" stroke="#e2e8f0" stroke-width="1" />
    <text x="25" y="50" text-anchor="middle" fill="#64748b" font-size="10">Card</text>
  </g>
  
  <g transform="translate(200, 380)">
    <!-- Input Icon -->
    <rect x="0" y="10" width="60" height="16" rx="2" fill="white" stroke="#d1d5db" stroke-width="1" />
    <text x="30" y="50" text-anchor="middle" fill="#64748b" font-size="10">Input</text>
  </g>
  
  <g transform="translate(280, 380)">
    <!-- Chart Icon -->
    <rect x="0" y="20" width="8" height="15" fill="#10b981" />
    <rect x="12" y="10" width="8" height="25" fill="#3b82f6" />
    <rect x="24" y="5" width="8" height="30" fill="#8b5cf6" />
    <text x="20" y="50" text-anchor="middle" fill="#64748b" font-size="10">Chart</text>
  </g>
</svg>`;
  };

  const formatScore = (score: number) => {
    if (score >= 80) return { color: 'text-green-600', label: 'Excellent' };
    if (score >= 65) return { color: 'text-yellow-600', label: 'Good' };
    return { color: 'text-red-600', label: 'Needs Improvement' };
  };

  if (!hasRecruiterData && !hasResumeData && !hasAssessmentData) {
    return (
      <div className="max-w-4xl mx-auto">
        <div className="flex items-center gap-3 mb-6">
          <Button variant="ghost" onClick={onBack}>
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h1>Export Reports</h1>
        </div>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" />
              No Data Available
            </CardTitle>
            <CardDescription>
              Complete an interview, resume tailoring, or self-assessment to generate exportable reports
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-center py-8">
              <FileText className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
              <p className="text-muted-foreground mb-4">
                No completed sessions found. Start with one of our assessment tools to generate professional reports.
              </p>
              <Button onClick={onBack}>
                Return to Main Menu
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto">
      <div className="flex items-center gap-3 mb-6">
        <Button variant="ghost" onClick={onBack}>
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <h1>Export Professional Reports</h1>
      </div>

      <Tabs defaultValue="available" className="space-y-6">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="available">Data Reports</TabsTrigger>
          <TabsTrigger value="design">Design Assets</TabsTrigger>
          <TabsTrigger value="preview">Preview</TabsTrigger>
        </TabsList>

        <TabsContent value="available" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {hasRecruiterData && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <User className="h-5 w-5" />
                    Recruiter Interview Report
                  </CardTitle>
                  <CardDescription>
                    Comprehensive candidate evaluation and interview analysis
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm">Candidate:</span>
                      <span className="text-sm font-medium">{data.recruiterinterviewData.candidateName}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Position:</span>
                      <span className="text-sm font-medium">{data.recruiterinterviewData.position}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Overall Score:</span>
                      <Badge variant={
                        data.recruiterinterviewData.evaluation.score_percent >= 80 ? 'default' :
                        data.recruiterinterviewData.evaluation.score_percent >= 65 ? 'secondary' : 'destructive'
                      }>
                        {data.recruiterinterviewData.evaluation.score_percent}%
                      </Badge>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Recommendation:</span>
                      <Badge variant="outline">{data.recruiterinterviewData.evaluation.recommendation}</Badge>
                    </div>
                  </div>
                  
                  <Separator />
                  
                  <div className="space-y-2">
                    <p className="text-sm font-medium">Export Options:</p>
                    <div className="flex gap-2">
                      <Button 
                        size="sm" 
                        onClick={() => handleExport('pdf', 'recruiter')}
                        disabled={isExporting}
                      >
                        <Download className="h-4 w-4 mr-2" />
                        PDF
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={() => handleExport('docx', 'recruiter')}
                        disabled={isExporting}
                      >
                        <Download className="h-4 w-4 mr-2" />
                        DOCX
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {hasResumeData && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="h-5 w-5" />
                    Resume Tailoring Report
                  </CardTitle>
                  <CardDescription>
                    Optimized resume and detailed improvement analysis
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm">Candidate:</span>
                      <span className="text-sm font-medium">{data.candidateresumeData.candidateName}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Target Role:</span>
                      <span className="text-sm font-medium">{data.candidateresumeData.targetPosition}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Optimization Score:</span>
                      <Badge variant={
                        data.candidateresumeData.analysis.overallScore >= 80 ? 'default' :
                        data.candidateresumeData.analysis.overallScore >= 65 ? 'secondary' : 'destructive'
                      }>
                        {data.candidateresumeData.analysis.overallScore}%
                      </Badge>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Keyword Match:</span>
                      <span className="text-sm font-medium">{data.candidateresumeData.analysis.keywordMatch}%</span>
                    </div>
                  </div>
                  
                  <Separator />
                  
                  <div className="space-y-2">
                    <p className="text-sm font-medium">Export Options:</p>
                    <div className="flex gap-2">
                      <Button 
                        size="sm" 
                        onClick={() => handleExport('pdf', 'resume')}
                        disabled={isExporting}
                      >
                        <Download className="h-4 w-4 mr-2" />
                        PDF
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={() => handleExport('docx', 'resume')}
                        disabled={isExporting}
                      >
                        <Download className="h-4 w-4 mr-2" />
                        DOCX
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {hasAssessmentData && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="h-5 w-5" />
                    Self-Assessment Report
                  </CardTitle>
                  <CardDescription>
                    Mock interview results and personalized coaching plan
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm">Candidate:</span>
                      <span className="text-sm font-medium">{data.candidateassessmentData.candidateName}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Target Role:</span>
                      <span className="text-sm font-medium">{data.candidateassessmentData.targetRole}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Overall Score:</span>
                      <Badge variant={
                        data.candidateassessmentData.assessment.overall_score_percent >= 80 ? 'default' :
                        data.candidateassessmentData.assessment.overall_score_percent >= 65 ? 'secondary' : 'destructive'
                      }>
                        {data.candidateassessmentData.assessment.overall_score_percent}%
                      </Badge>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Recommendation:</span>
                      <Badge variant="outline">{data.candidateassessmentData.assessment.recommendation}</Badge>
                    </div>
                  </div>
                  
                  <Separator />
                  
                  <div className="space-y-2">
                    <p className="text-sm font-medium">Export Options:</p>
                    <div className="flex gap-2">
                      <Button 
                        size="sm" 
                        onClick={() => handleExport('pdf', 'assessment')}
                        disabled={isExporting}
                      >
                        <Download className="h-4 w-4 mr-2" />
                        PDF
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={() => handleExport('docx', 'assessment')}
                        disabled={isExporting}
                      >
                        <Download className="h-4 w-4 mr-2" />
                        DOCX
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="h-5 w-5" />
                Export Features
              </CardTitle>
              <CardDescription>
                Professional reporting capabilities for recruitment and career development
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="text-center">
                  <div className="bg-blue-100 p-3 rounded-lg mb-3 mx-auto w-fit">
                    <FileText className="h-6 w-6 text-blue-600" />
                  </div>
                  <h4 className="font-medium mb-2">Professional Formatting</h4>
                  <p className="text-sm text-muted-foreground">
                    Clean, professional layouts optimized for business use
                  </p>
                </div>
                <div className="text-center">
                  <div className="bg-green-100 p-3 rounded-lg mb-3 mx-auto w-fit">
                    <BarChart3 className="h-6 w-6 text-green-600" />
                  </div>
                  <h4 className="font-medium mb-2">Detailed Analytics</h4>
                  <p className="text-sm text-muted-foreground">
                    Comprehensive scoring and performance breakdowns
                  </p>
                </div>
                <div className="text-center">
                  <div className="bg-purple-100 p-3 rounded-lg mb-3 mx-auto w-fit">
                    <CheckCircle className="h-6 w-6 text-purple-600" />
                  </div>
                  <h4 className="font-medium mb-2">Actionable Insights</h4>
                  <p className="text-sm text-muted-foreground">
                    Clear recommendations and improvement strategies
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="design" className="space-y-6">
          {/* Figma Design Export */}
          <Card className="border-2 border-purple-200 dark:border-purple-800">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Figma className="h-5 w-5 text-purple-600" />
                Figma Design Export
              </CardTitle>
              <CardDescription>
                Export your dashboard and components as Figma design files for design collaboration
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-lg p-6">
                <div className="flex items-start gap-4">
                  <div className="bg-gradient-to-r from-purple-600 to-pink-600 rounded-full p-2">
                    <Palette className="h-5 w-5 text-white" />
                  </div>
                  <div>
                    <h3 className="font-semibold mb-2">Design System Integration</h3>
                    <p className="text-sm text-muted-foreground">
                      Export your personalized dashboard layouts, color schemes, and component variations 
                      as ready-to-use Figma files for your design team.
                    </p>
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Dashboard Layouts */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Monitor className="h-4 w-4 text-blue-600" />
                      Dashboard Layouts
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-3 gap-2">
                      <div className="bg-blue-100 dark:bg-blue-900/30 rounded p-2 text-center">
                        <Monitor className="h-4 w-4 mx-auto mb-1 text-blue-600" />
                        <span className="text-xs">Desktop</span>
                      </div>
                      <div className="bg-green-100 dark:bg-green-900/30 rounded p-2 text-center">
                        <Tablet className="h-4 w-4 mx-auto mb-1 text-green-600" />
                        <span className="text-xs">Tablet</span>
                      </div>
                      <div className="bg-purple-100 dark:bg-purple-900/30 rounded p-2 text-center">
                        <Smartphone className="h-4 w-4 mx-auto mb-1 text-purple-600" />
                        <span className="text-xs">Mobile</span>
                      </div>
                    </div>
                    <div className="text-sm text-muted-foreground">
                      Complete responsive layouts for all device sizes
                    </div>
                    <Button 
                      className="w-full" 
                      onClick={() => handleExport('figma', 'dashboard-layouts')}
                      disabled={isExporting}
                    >
                      <Figma className="h-4 w-4 mr-2" />
                      Export Layouts
                    </Button>
                  </CardContent>
                </Card>

                {/* Component Library */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Layers className="h-4 w-4 text-green-600" />
                      Component Library
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      <div className="flex items-center justify-between text-sm">
                        <span>UI Components</span>
                        <Badge variant="outline">45 items</Badge>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span>Data Visualizations</span>
                        <Badge variant="outline">12 items</Badge>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span>Form Elements</span>
                        <Badge variant="outline">28 items</Badge>
                      </div>
                    </div>
                    <div className="text-sm text-muted-foreground">
                      Reusable components with variants and states
                    </div>
                    <Button 
                      className="w-full" 
                      onClick={() => handleExport('figma', 'components')}
                      disabled={isExporting}
                    >
                      <Box className="h-4 w-4 mr-2" />
                      Export Components
                    </Button>
                  </CardContent>
                </Card>
              </div>

              {/* Design Tokens */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Palette className="h-4 w-4 text-orange-600" />
                    Design Tokens & Style Guide
                  </CardTitle>
                  <CardDescription>
                    Export your customized design system including colors, typography, and spacing
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <div className="text-center">
                      <div className="bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg h-12 mb-2"></div>
                      <span className="text-xs text-muted-foreground">Color Palette</span>
                    </div>
                    <div className="text-center">
                      <div className="bg-gray-100 dark:bg-gray-800 rounded-lg h-12 mb-2 flex items-center justify-center">
                        <span className="text-sm font-medium">Aa</span>
                      </div>
                      <span className="text-xs text-muted-foreground">Typography</span>
                    </div>
                    <div className="text-center">
                      <div className="bg-gray-100 dark:bg-gray-800 rounded-lg h-12 mb-2 flex items-center justify-center">
                        <div className="grid grid-cols-2 gap-1">
                          <div className="w-2 h-2 bg-blue-500 rounded"></div>
                          <div className="w-2 h-2 bg-green-500 rounded"></div>
                          <div className="w-2 h-2 bg-purple-500 rounded"></div>
                          <div className="w-2 h-2 bg-orange-500 rounded"></div>
                        </div>
                      </div>
                      <span className="text-xs text-muted-foreground">Spacing</span>
                    </div>
                    <div className="text-center">
                      <div className="bg-gray-100 dark:bg-gray-800 rounded-lg h-12 mb-2 flex items-center justify-center">
                        <div className="w-8 h-6 border-2 border-gray-400 rounded"></div>
                      </div>
                      <span className="text-xs text-muted-foreground">Borders</span>
                    </div>
                  </div>
                  
                  <div className="flex gap-3">
                    <Button 
                      onClick={() => handleExport('figma', 'design-tokens')}
                      disabled={isExporting}
                    >
                      <Palette className="h-4 w-4 mr-2" />
                      Export Tokens
                    </Button>
                    <Button 
                      variant="outline"
                      onClick={() => handleExport('css', 'design-tokens')}
                      disabled={isExporting}
                    >
                      <Code className="h-4 w-4 mr-2" />
                      Export CSS
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Custom Templates */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="h-4 w-4 text-indigo-600" />
                    Custom Templates
                  </CardTitle>
                  <CardDescription>
                    Pre-designed templates based on your usage patterns
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {[
                      {
                        name: 'Interview Dashboard',
                        description: 'Recruiter interview interface layout',
                        preview: 'bg-blue-100 dark:bg-blue-900/30',
                        icon: User
                      },
                      {
                        name: 'Skills Analysis',
                        description: 'Candidate skill assessment layout',
                        preview: 'bg-green-100 dark:bg-green-900/30',
                        icon: Target
                      },
                      {
                        name: 'Report Template',
                        description: 'Professional report design',
                        preview: 'bg-purple-100 dark:bg-purple-900/30',
                        icon: BarChart3
                      }
                    ].map((template, index) => (
                      <Card key={index} className="hover:shadow-md transition-shadow cursor-pointer">
                        <CardContent className="p-4">
                          <div className={`${template.preview} rounded-lg h-20 mb-3 flex items-center justify-center`}>
                            <template.icon className="h-8 w-8 text-gray-600" />
                          </div>
                          <h4 className="font-medium text-sm mb-1">{template.name}</h4>
                          <p className="text-xs text-muted-foreground mb-3">{template.description}</p>
                          <Button 
                            size="sm" 
                            className="w-full"
                            onClick={() => handleExport('figma', `template-${template.name.toLowerCase().replace(' ', '-')}`)}
                            disabled={isExporting}
                          >
                            <Download className="h-3 w-3 mr-2" />
                            Export
                          </Button>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Export Options */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Share2 className="h-4 w-4 text-blue-600" />
                    Export Options
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-medium mb-3">Figma Integration</h4>
                      <div className="space-y-3">
                        <Button 
                          className="w-full bg-purple-600 hover:bg-purple-700"
                          onClick={() => handleExport('figma', 'complete-design-system')}
                          disabled={isExporting}
                        >
                          <Figma className="h-4 w-4 mr-2" />
                          Export Complete Design System
                        </Button>
                        <Button 
                          variant="outline" 
                          className="w-full"
                          onClick={() => handleExport('figma', 'components-only')}
                          disabled={isExporting}
                        >
                          <Layers className="h-4 w-4 mr-2" />
                          Components Only
                        </Button>
                      </div>
                    </div>
                    
                    <div>
                      <h4 className="font-medium mb-3">Alternative Formats</h4>
                      <div className="space-y-3">
                        <Button 
                          variant="outline" 
                          className="w-full"
                          onClick={() => handleExport('svg', 'icons-and-graphics')}
                          disabled={isExporting}
                        >
                          <FileText className="h-4 w-4 mr-2" />
                          SVG Assets
                        </Button>
                        <Button 
                          variant="outline" 
                          className="w-full"
                          onClick={() => handleExport('zip', 'design-package')}
                          disabled={isExporting}
                        >
                          <Archive className="h-4 w-4 mr-2" />
                          Complete Package
                        </Button>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="preview" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Report Preview</CardTitle>
              <CardDescription>
                Preview the content that will be included in your exported reports
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Tabs defaultValue={hasRecruiterData ? "recruiter" : hasResumeData ? "resume" : "assessment"}>
                <TabsList className="grid w-full grid-cols-3">
                  {hasRecruiterData && <TabsTrigger value="recruiter">Recruiter Report</TabsTrigger>}
                  {hasResumeData && <TabsTrigger value="resume">Resume Report</TabsTrigger>}
                  {hasAssessmentData && <TabsTrigger value="assessment">Assessment Report</TabsTrigger>}
                </TabsList>

                {hasRecruiterData && (
                  <TabsContent value="recruiter">
                    <ScrollArea className="h-96 w-full border rounded-lg p-4">
                      <pre className="text-sm whitespace-pre-wrap">{generateRecruiterReport()}</pre>
                    </ScrollArea>
                  </TabsContent>
                )}

                {hasResumeData && (
                  <TabsContent value="resume">
                    <ScrollArea className="h-96 w-full border rounded-lg p-4">
                      <pre className="text-sm whitespace-pre-wrap">{generateResumeReport()}</pre>
                    </ScrollArea>
                  </TabsContent>
                )}

                {hasAssessmentData && (
                  <TabsContent value="assessment">
                    <ScrollArea className="h-96 w-full border rounded-lg p-4">
                      <pre className="text-sm whitespace-pre-wrap">{generateAssessmentReport()}</pre>
                    </ScrollArea>
                  </TabsContent>
                )}
              </Tabs>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {isExporting && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <Card className="w-80">
            <CardContent className="pt-6">
              <div className="text-center">
                <div className="h-8 w-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4" />
                <p className="font-medium">Generating Report</p>
                <p className="text-sm text-muted-foreground">This may take a few moments...</p>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}